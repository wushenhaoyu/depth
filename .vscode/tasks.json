{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: nvcc 编译 OpenCV + CUDA 项目",
            "command": "/usr/local/cuda/bin/nvcc",
            "args": [
                "-std=c++17",
                "-D_UNIX_",
                "-D_LINUX_",
                "-arch=sm_62",
                "-g",
                "-o",
                "${workspaceFolder}/bin/main",
                "${workspaceFolder}/main.cu",
                //"${workspaceFolder}/ConfidenceCompute.cu",
                //"${workspaceFolder}/ToolOneTestDemo.cpp",
                "${workspaceFolder}/ToolTwoTestDemo.cpp",
                "${workspaceFolder}/CostVolCompute.cu",
                "${workspaceFolder}/DataDeal.cu",
                //"${workspaceFolder}/DepthComputeToolOne.cpp",
                "${workspaceFolder}/DepthComputeToolTwo.cu",
                "${workspaceFolder}/GlobalOptimization.cpp",
                "${workspaceFolder}/ImageRander.cu",
                "${workspaceFolder}/SceneDepthCompute.cpp",
                "${workspaceFolder}/VirtualDepthCompute.cpp",
                "${workspaceFolder}/CostVolFilter.cu",
                "${workspaceFolder}/DataParameter.cu",
                "${workspaceFolder}/CAST/STCA.cpp",
                "${workspaceFolder}/CAST/StereoDisparity.cpp",
                "${workspaceFolder}/CAST/StereoHelper.cpp",
                "${workspaceFolder}/CAST/SegmentTree.cpp",
                "${workspaceFolder}/CAST/Toolkit.cpp",
                "${workspaceFolder}/CAST/ctmf.o",
                "-I/opt/jai/ebus_sdk/linux-aarch64-arm/include",
                "-I/usr/local/include/opencv4",
                "-I${workspaceFolder}/gcov3",
                "-I${workspaceFolder}/CAST",
                "-I/usr/local/cuda/include",
                "-L/usr/local/lib",
                "-L/opt/jai/ebus_sdk/linux-aarch64-arm/lib",
                "-L/usr/local/cuda/lib64",
                "-L${workspaceFolder}/gcov3",

                "--linker-options",
                "-rpath=/opt/jai/ebus_sdk/linux-aarch64-arm/lib,-rpath=/opt/jai/ebus_sdk/linux-aarch64-arm/lib/genicam/bin/Linux64_ARM",
                "-lPvBase",
                "-lPvDevice",
                "-lPvStream",
                "-lPvSystem",
                "-lPvBuffer",
                "-lPvGenICam",
                "-lpthread",

                "-lopencv_core",
                "-lopencv_imgcodecs",
                "-lopencv_highgui",
                "-lopencv_imgproc",
                "-lopencv_cudaimgproc",
                "-lopencv_cudafilters",
                "-lopencv_cudaarithm",
                "-lcudart",
                "-lcublas",
                "-lcudnn",
                "-lGCoptimization",
                "-rdc=true"  // 启用可重定位设备代码
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "OpenCV + CUDA 项目编译任务"
        },
        {
            "label": "Run CUDA with compute-sanitizer",
            "type": "shell",
            "command": "/usr/local/cuda/bin/compute-sanitizer",
            "args": [
                "--log-file", "${workspaceFolder}/compute_sanitizer_output.log", // 指定日志文件路径
                "${workspaceFolder}/bin/main" // 运行你的程序，确保替换为你的程序路径
            ],
            "dependsOn": ["C/C++: nvcc 编译 OpenCV + CUDA 项目"], // 依赖于编译任务
            "problemMatcher": [],
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "detail": "使用 compute-sanitizer 运行程序并检查内存错误"
        }
    ]
}